
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Nov 26 01:00:49 CET 2014
//----------------------------------------------------

import java_cup.runtime.*;
import java.io.*;
import java.lang.*;
import stree.*;
import type.*;
import evn.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Nov 26 01:00:49 CET 2014
  */
public class CompilerParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public CompilerParser() {super();}

  /** Constructor which sets the default scanner. */
  public CompilerParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public CompilerParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\150\000\002\002\004\000\002\003\003\000\002\002" +
    "\007\000\002\004\004\000\002\004\003\000\002\005\003" +
    "\000\002\005\003\000\002\005\003\000\002\005\003\000" +
    "\002\007\004\000\002\007\003\000\002\007\003\000\002" +
    "\007\003\000\002\007\003\000\002\007\003\000\002\007" +
    "\003\000\002\007\003\000\002\007\003\000\002\006\004" +
    "\000\002\006\003\000\002\034\003\000\002\034\003\000" +
    "\002\033\011\000\002\037\015\000\002\016\003\000\002" +
    "\017\003\000\002\041\011\000\002\040\011\000\002\055" +
    "\012\000\002\054\006\000\002\054\006\000\002\054\010" +
    "\000\002\030\005\000\002\030\005\000\002\030\005\000" +
    "\002\030\005\000\002\030\005\000\002\030\005\000\002" +
    "\030\005\000\002\030\005\000\002\030\005\000\002\030" +
    "\005\000\002\030\005\000\002\030\005\000\002\030\005" +
    "\000\002\030\005\000\002\030\005\000\002\030\005\000" +
    "\002\030\005\000\002\030\005\000\002\030\005\000\002" +
    "\030\005\000\002\030\004\000\002\030\004\000\002\030" +
    "\005\000\002\030\003\000\002\031\005\000\002\031\003" +
    "\000\002\010\004\000\002\010\004\000\002\010\004\000" +
    "\002\032\005\000\002\032\005\000\002\032\005\000\002" +
    "\051\003\000\002\051\003\000\002\051\003\000\002\051" +
    "\003\000\002\051\003\000\002\021\004\000\002\015\003" +
    "\000\002\015\003\000\002\015\003\000\002\015\003\000" +
    "\002\025\004\000\002\025\004\000\002\011\011\000\002" +
    "\013\011\000\002\014\005\000\002\014\004\000\002\023" +
    "\003\000\002\012\003\000\002\012\005\000\002\052\003" +
    "\000\002\052\003\000\002\057\012\000\002\060\014\000" +
    "\002\053\005\000\002\047\007\000\002\050\010\000\002" +
    "\043\003\000\002\043\003\000\002\044\005\000\002\045" +
    "\007\000\002\056\012\000\002\061\004\000\002\020\003" +
    "\000\002\020\003\000\002\022\003\000\002\022\003\000" +
    "\002\022\003\000\002\022\003\000\002\024\004\000\002" +
    "\026\007" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\326\000\034\012\044\044\006\045\022\063\030\066" +
    "\017\067\024\071\014\075\027\101\043\105\020\106\040" +
    "\110\037\111\042\001\002\000\004\052\330\001\002\000" +
    "\042\002\uffa7\011\uffa7\012\uffa7\013\uffa7\044\uffa7\045\uffa7" +
    "\063\uffa7\066\uffa7\067\uffa7\071\uffa7\075\uffa7\101\uffa7\105" +
    "\uffa7\106\uffa7\110\uffa7\111\uffa7\001\002\000\020\012\044" +
    "\044\006\045\022\105\046\106\040\110\037\111\042\001" +
    "\002\000\004\052\326\001\002\000\042\002\ufff6\011\ufff6" +
    "\012\ufff6\013\ufff6\044\ufff6\045\ufff6\063\ufff6\066\ufff6\067" +
    "\ufff6\071\ufff6\075\ufff6\101\ufff6\105\ufff6\106\ufff6\110\ufff6" +
    "\111\ufff6\001\002\000\054\020\051\022\062\023\056\024" +
    "\055\026\052\027\057\030\060\031\066\032\073\034\071" +
    "\035\064\037\070\040\063\041\074\042\061\043\053\046" +
    "\067\047\054\050\065\051\050\052\325\001\002\000\004" +
    "\052\324\001\002\000\042\002\uffee\011\uffee\012\044\013" +
    "\uffee\044\006\045\022\063\030\066\017\067\024\071\014" +
    "\075\027\101\043\105\020\106\040\110\037\111\042\001" +
    "\002\000\004\012\315\001\002\000\042\002\ufff0\011\ufff0" +
    "\012\ufff0\013\ufff0\044\ufff0\045\ufff0\063\ufff0\066\ufff0\067" +
    "\ufff0\071\ufff0\075\ufff0\101\ufff0\105\ufff0\106\ufff0\110\ufff0" +
    "\111\ufff0\001\002\000\004\002\314\001\002\000\020\012" +
    "\044\044\006\045\022\105\046\106\040\110\037\111\042" +
    "\001\002\000\064\004\305\012\304\020\uffb8\022\uffb8\023" +
    "\uffb8\024\uffb8\026\uffb8\027\uffb8\030\uffb8\031\uffb8\032\uffb8" +
    "\033\uffb1\034\uffb8\035\uffb8\037\uffb8\040\uffb8\041\uffb8\042" +
    "\uffb8\043\uffb8\046\uffb8\047\uffb8\050\uffb8\051\uffb8\052\uffb8" +
    "\053\uffb1\001\002\000\042\002\ufff2\011\ufff2\012\ufff2\013" +
    "\ufff2\044\ufff2\045\ufff2\063\ufff2\066\ufff2\067\ufff2\071\ufff2" +
    "\075\ufff2\101\ufff2\105\ufff2\106\ufff2\110\ufff2\111\ufff2\001" +
    "\002\000\020\012\044\044\006\045\022\105\046\106\040" +
    "\110\037\111\042\001\002\000\042\002\ufff5\011\ufff5\012" +
    "\ufff5\013\ufff5\044\ufff5\045\ufff5\063\ufff5\066\ufff5\067\ufff5" +
    "\071\ufff5\075\ufff5\101\ufff5\105\ufff5\106\ufff5\110\ufff5\111" +
    "\ufff5\001\002\000\004\012\267\001\002\000\042\002\ufff1" +
    "\011\ufff1\012\ufff1\013\ufff1\044\ufff1\045\ufff1\063\ufff1\066" +
    "\ufff1\067\ufff1\071\ufff1\075\ufff1\101\ufff1\105\ufff1\106\ufff1" +
    "\110\ufff1\111\ufff1\001\002\000\042\002\uffed\011\uffed\012" +
    "\uffed\013\uffed\044\uffed\045\uffed\063\uffed\066\uffed\067\uffed" +
    "\071\uffed\075\uffed\101\uffed\105\uffed\106\uffed\110\uffed\111" +
    "\uffed\001\002\000\004\105\140\001\002\000\004\105\140" +
    "\001\002\000\042\002\uffec\011\uffec\012\uffec\013\uffec\044" +
    "\uffec\045\uffec\063\uffec\066\uffec\067\uffec\071\uffec\075\uffec" +
    "\101\uffec\105\uffec\106\uffec\110\uffec\111\uffec\001\002\000" +
    "\042\002\ufff7\011\ufff7\012\ufff7\013\ufff7\044\ufff7\045\ufff7" +
    "\063\ufff7\066\ufff7\067\ufff7\071\ufff7\075\ufff7\101\ufff7\105" +
    "\ufff7\106\ufff7\110\ufff7\111\ufff7\001\002\000\006\033\226" +
    "\053\227\001\002\000\064\010\uffca\013\uffca\015\uffca\020" +
    "\uffca\022\uffca\023\uffca\024\uffca\026\uffca\027\uffca\030\uffca" +
    "\031\uffca\032\uffca\034\uffca\035\uffca\037\uffca\040\uffca\041" +
    "\uffca\042\uffca\043\uffca\046\uffca\047\uffca\050\uffca\051\uffca" +
    "\052\uffca\077\uffca\001\002\000\042\002\uffa6\011\uffa6\012" +
    "\uffa6\013\uffa6\044\uffa6\045\uffa6\063\uffa6\066\uffa6\067\uffa6" +
    "\071\uffa6\075\uffa6\101\uffa6\105\uffa6\106\uffa6\110\uffa6\111" +
    "\uffa6\001\002\000\042\002\ufff4\011\ufff4\012\ufff4\013\ufff4" +
    "\044\ufff4\045\ufff4\063\ufff4\066\ufff4\067\ufff4\071\ufff4\075" +
    "\ufff4\101\ufff4\105\ufff4\106\ufff4\110\ufff4\111\ufff4\001\002" +
    "\000\064\010\uffba\013\uffba\015\uffba\020\uffba\022\uffba\023" +
    "\uffba\024\uffba\026\uffba\027\uffba\030\uffba\031\uffba\032\uffba" +
    "\034\uffba\035\uffba\037\uffba\040\uffba\041\uffba\042\uffba\043" +
    "\uffba\046\uffba\047\uffba\050\uffba\051\uffba\052\uffba\077\uffba" +
    "\001\002\000\064\010\uffbb\013\uffbb\015\uffbb\020\uffbb\022" +
    "\uffbb\023\uffbb\024\uffbb\026\uffbb\027\uffbb\030\uffbb\031\uffbb" +
    "\032\uffbb\034\uffbb\035\uffbb\037\uffbb\040\uffbb\041\uffbb\042" +
    "\uffbb\043\uffbb\046\uffbb\047\uffbb\050\uffbb\051\uffbb\052\uffbb" +
    "\077\uffbb\001\002\000\004\002\000\001\002\000\064\010" +
    "\uffb9\013\uffb9\015\uffb9\020\uffb9\022\uffb9\023\uffb9\024\uffb9" +
    "\026\uffb9\027\uffb9\030\uffb9\031\uffb9\032\uffb9\034\uffb9\035" +
    "\uffb9\037\uffb9\040\uffb9\041\uffb9\042\uffb9\043\uffb9\046\uffb9" +
    "\047\uffb9\050\uffb9\051\uffb9\052\uffb9\077\uffb9\001\002\000" +
    "\004\010\121\001\002\000\020\012\044\044\006\045\022" +
    "\105\046\106\040\110\037\111\042\001\002\000\042\002" +
    "\ufff3\011\ufff3\012\ufff3\013\ufff3\044\ufff3\045\ufff3\063\ufff3" +
    "\066\ufff3\067\ufff3\071\ufff3\075\ufff3\101\ufff3\105\ufff3\106" +
    "\ufff3\110\ufff3\111\ufff3\001\002\000\064\010\uffb8\013\uffb8" +
    "\015\uffb8\020\uffb8\022\uffb8\023\uffb8\024\uffb8\026\uffb8\027" +
    "\uffb8\030\uffb8\031\uffb8\032\uffb8\034\uffb8\035\uffb8\037\uffb8" +
    "\040\uffb8\041\uffb8\042\uffb8\043\uffb8\046\uffb8\047\uffb8\050" +
    "\uffb8\051\uffb8\052\uffb8\077\uffb8\001\002\000\054\013\072" +
    "\020\051\022\062\023\056\024\055\026\052\027\057\030" +
    "\060\031\066\032\073\034\071\035\064\037\070\040\063" +
    "\041\074\042\061\043\053\046\067\047\054\050\065\051" +
    "\050\001\002\000\020\012\044\044\006\045\022\105\046" +
    "\106\040\110\037\111\042\001\002\000\020\012\044\044" +
    "\006\045\022\105\046\106\040\110\037\111\042\001\002" +
    "\000\020\012\044\044\006\045\022\105\046\106\040\110" +
    "\037\111\042\001\002\000\020\012\044\044\006\045\022" +
    "\105\046\106\040\110\037\111\042\001\002\000\020\012" +
    "\044\044\006\045\022\105\046\106\040\110\037\111\042" +
    "\001\002\000\020\012\044\044\006\045\022\105\046\106" +
    "\040\110\037\111\042\001\002\000\020\012\044\044\006" +
    "\045\022\105\046\106\040\110\037\111\042\001\002\000" +
    "\020\012\044\044\006\045\022\105\046\106\040\110\037" +
    "\111\042\001\002\000\020\012\044\044\006\045\022\105" +
    "\046\106\040\110\037\111\042\001\002\000\020\012\044" +
    "\044\006\045\022\105\046\106\040\110\037\111\042\001" +
    "\002\000\020\012\044\044\006\045\022\105\046\106\040" +
    "\110\037\111\042\001\002\000\020\012\044\044\006\045" +
    "\022\105\046\106\040\110\037\111\042\001\002\000\020" +
    "\012\044\044\006\045\022\105\046\106\040\110\037\111" +
    "\042\001\002\000\020\012\044\044\006\045\022\105\046" +
    "\106\040\110\037\111\042\001\002\000\020\012\044\044" +
    "\006\045\022\105\046\106\040\110\037\111\042\001\002" +
    "\000\020\012\044\044\006\045\022\105\046\106\040\110" +
    "\037\111\042\001\002\000\020\012\044\044\006\045\022" +
    "\105\046\106\040\110\037\111\042\001\002\000\020\012" +
    "\044\044\006\045\022\105\046\106\040\110\037\111\042" +
    "\001\002\000\064\010\uffcb\013\uffcb\015\uffcb\020\uffcb\022" +
    "\uffcb\023\uffcb\024\uffcb\026\uffcb\027\uffcb\030\uffcb\031\uffcb" +
    "\032\uffcb\034\uffcb\035\uffcb\037\uffcb\040\uffcb\041\uffcb\042" +
    "\uffcb\043\uffcb\046\uffcb\047\uffcb\050\uffcb\051\uffcb\052\uffcb" +
    "\077\uffcb\001\002\000\020\012\044\044\006\045\022\105" +
    "\046\106\040\110\037\111\042\001\002\000\020\012\044" +
    "\044\006\045\022\105\046\106\040\110\037\111\042\001" +
    "\002\000\064\010\uffcf\013\uffcf\015\uffcf\020\051\022\062" +
    "\023\056\024\055\026\052\027\057\030\060\031\066\032" +
    "\073\034\071\035\uffcf\037\uffcf\040\uffcf\041\uffcf\042\uffcf" +
    "\043\053\046\067\047\054\050\065\051\050\052\uffcf\077" +
    "\uffcf\001\002\000\064\010\uffd8\013\uffd8\015\uffd8\020\uffd8" +
    "\022\062\023\056\024\uffd8\026\uffd8\027\uffd8\030\uffd8\031" +
    "\uffd8\032\uffd8\034\uffd8\035\uffd8\037\uffd8\040\uffd8\041\uffd8" +
    "\042\uffd8\043\053\046\067\047\054\050\065\051\050\052" +
    "\uffd8\077\uffd8\001\002\000\064\010\uffd7\013\uffd7\015\uffd7" +
    "\020\uffd7\022\062\023\056\024\uffd7\026\uffd7\027\uffd7\030" +
    "\uffd7\031\uffd7\032\uffd7\034\uffd7\035\uffd7\037\uffd7\040\uffd7" +
    "\041\uffd7\042\uffd7\043\053\046\067\047\054\050\065\051" +
    "\050\052\uffd7\077\uffd7\001\002\000\064\010\uffd1\013\uffd1" +
    "\015\uffd1\020\051\022\062\023\056\024\055\026\052\027" +
    "\057\030\060\031\066\032\073\034\071\035\uffd1\037\uffd1" +
    "\040\uffd1\041\uffd1\042\uffd1\043\053\046\067\047\054\050" +
    "\065\051\050\052\uffd1\077\uffd1\001\002\000\064\010\uffde" +
    "\013\uffde\015\uffde\020\uffde\022\uffde\023\uffde\024\uffde\026" +
    "\uffde\027\uffde\030\uffde\031\uffde\032\uffde\034\uffde\035\uffde" +
    "\037\uffde\040\uffde\041\uffde\042\uffde\043\uffde\046\uffde\047" +
    "\054\050\065\051\050\052\uffde\077\uffde\001\002\000\064" +
    "\010\uffd9\013\uffd9\015\uffd9\020\uffd9\022\062\023\056\024" +
    "\uffd9\026\uffd9\027\uffd9\030\uffd9\031\uffd9\032\uffd9\034\uffd9" +
    "\035\uffd9\037\uffd9\040\uffd9\041\uffd9\042\uffd9\043\053\046" +
    "\067\047\054\050\065\051\050\052\uffd9\077\uffd9\001\002" +
    "\000\064\010\uffdf\013\uffdf\015\uffdf\020\uffdf\022\uffdf\023" +
    "\uffdf\024\uffdf\026\uffdf\027\uffdf\030\uffdf\031\uffdf\032\uffdf" +
    "\034\uffdf\035\uffdf\037\uffdf\040\uffdf\041\uffdf\042\uffdf\043" +
    "\uffdf\046\uffdf\047\uffdf\050\uffdf\051\uffdf\052\uffdf\077\uffdf" +
    "\001\002\000\064\010\uffd2\013\uffd2\015\uffd2\020\051\022" +
    "\062\023\056\024\055\026\052\027\057\030\060\031\066" +
    "\032\073\034\071\035\uffd2\037\uffd2\040\uffd2\041\uffd2\042" +
    "\uffd2\043\053\046\067\047\054\050\065\051\050\052\uffd2" +
    "\077\uffd2\001\002\000\064\010\uffd0\013\uffd0\015\uffd0\020" +
    "\051\022\062\023\056\024\055\026\052\027\057\030\060" +
    "\031\066\032\073\034\071\035\uffd0\037\uffd0\040\uffd0\041" +
    "\uffd0\042\uffd0\043\053\046\067\047\054\050\065\051\050" +
    "\052\uffd0\077\uffd0\001\002\000\064\010\uffd6\013\uffd6\015" +
    "\uffd6\020\uffd6\022\uffd6\023\uffd6\024\uffd6\026\uffd6\027\uffd6" +
    "\030\uffd6\031\uffd6\032\uffd6\034\uffd6\035\uffd6\037\uffd6\040" +
    "\uffd6\041\uffd6\042\uffd6\043\053\046\067\047\054\050\065" +
    "\051\050\052\uffd6\077\uffd6\001\002\000\064\010\uffce\013" +
    "\uffce\015\uffce\020\051\022\062\023\056\024\055\026\052" +
    "\027\057\030\060\031\066\032\073\034\071\035\uffce\037" +
    "\uffce\040\uffce\041\uffce\042\uffce\043\053\046\067\047\054" +
    "\050\065\051\050\052\uffce\077\uffce\001\002\000\064\010" +
    "\uffda\013\uffda\015\uffda\020\uffda\022\062\023\056\024\uffda" +
    "\026\uffda\027\uffda\030\uffda\031\uffda\032\uffda\034\uffda\035" +
    "\uffda\037\uffda\040\uffda\041\uffda\042\uffda\043\053\046\067" +
    "\047\054\050\065\051\050\052\uffda\077\uffda\001\002\000" +
    "\064\010\uffdb\013\uffdb\015\uffdb\020\uffdb\022\062\023\056" +
    "\024\uffdb\026\uffdb\027\uffdb\030\uffdb\031\uffdb\032\uffdb\034" +
    "\uffdb\035\uffdb\037\uffdb\040\uffdb\041\uffdb\042\uffdb\043\053" +
    "\046\067\047\054\050\065\051\050\052\uffdb\077\uffdb\001" +
    "\002\000\064\010\uffd5\013\uffd5\015\uffd5\020\uffd5\022\uffd5" +
    "\023\uffd5\024\uffd5\026\uffd5\027\uffd5\030\uffd5\031\uffd5\032" +
    "\uffd5\034\uffd5\035\uffd5\037\uffd5\040\uffd5\041\uffd5\042\uffd5" +
    "\043\053\046\067\047\054\050\065\051\050\052\uffd5\077" +
    "\uffd5\001\002\000\064\010\uffd3\013\uffd3\015\uffd3\020\uffd3" +
    "\022\062\023\056\024\uffd3\026\052\027\057\030\060\031" +
    "\066\032\073\034\071\035\uffd3\037\uffd3\040\uffd3\041\uffd3" +
    "\042\uffd3\043\053\046\067\047\054\050\065\051\050\052" +
    "\uffd3\077\uffd3\001\002\000\064\010\uffe0\013\uffe0\015\uffe0" +
    "\020\uffe0\022\uffe0\023\uffe0\024\uffe0\026\uffe0\027\uffe0\030" +
    "\uffe0\031\uffe0\032\uffe0\034\uffe0\035\uffe0\037\uffe0\040\uffe0" +
    "\041\uffe0\042\uffe0\043\uffe0\046\uffe0\047\uffe0\050\uffe0\051" +
    "\uffe0\052\uffe0\077\uffe0\001\002\000\064\010\uffe1\013\uffe1" +
    "\015\uffe1\020\uffe1\022\uffe1\023\uffe1\024\uffe1\026\uffe1\027" +
    "\uffe1\030\uffe1\031\uffe1\032\uffe1\034\uffe1\035\uffe1\037\uffe1" +
    "\040\uffe1\041\uffe1\042\uffe1\043\uffe1\046\uffe1\047\054\050" +
    "\065\051\050\052\uffe1\077\uffe1\001\002\000\064\010\uffdc" +
    "\013\uffdc\015\uffdc\020\uffdc\022\062\023\056\024\uffdc\026" +
    "\uffdc\027\uffdc\030\uffdc\031\uffdc\032\uffdc\034\uffdc\035\uffdc" +
    "\037\uffdc\040\uffdc\041\uffdc\042\uffdc\043\053\046\067\047" +
    "\054\050\065\051\050\052\uffdc\077\uffdc\001\002\000\064" +
    "\010\uffd4\013\uffd4\015\uffd4\020\uffd4\022\062\023\056\024" +
    "\uffd4\026\052\027\057\030\060\031\066\032\073\034\071" +
    "\035\uffd4\037\uffd4\040\uffd4\041\uffd4\042\uffd4\043\053\046" +
    "\067\047\054\050\065\051\050\052\uffd4\077\uffd4\001\002" +
    "\000\064\010\uffdd\013\uffdd\015\uffdd\020\uffdd\022\uffdd\023" +
    "\uffdd\024\uffdd\026\uffdd\027\uffdd\030\uffdd\031\uffdd\032\uffdd" +
    "\034\uffdd\035\uffdd\037\uffdd\040\uffdd\041\uffdd\042\uffdd\043" +
    "\uffdd\046\uffdd\047\uffdd\050\uffdd\051\uffdd\052\uffdd\077\uffdd" +
    "\001\002\000\012\021\124\100\134\102\127\105\133\001" +
    "\002\000\014\011\ufffb\021\ufffb\100\ufffb\102\ufffb\105\ufffb" +
    "\001\002\000\014\011\ufffa\021\ufffa\100\ufffa\102\ufffa\105" +
    "\ufffa\001\002\000\004\105\221\001\002\000\004\011\214" +
    "\001\002\000\014\011\ufffc\021\ufffc\100\ufffc\102\ufffc\105" +
    "\ufffc\001\002\000\004\103\205\001\002\000\014\011\uffad" +
    "\021\uffad\100\uffad\102\uffad\105\uffad\001\002\000\014\011" +
    "\ufff9\021\ufff9\100\ufff9\102\ufff9\105\ufff9\001\002\000\014" +
    "\011\uffae\021\uffae\100\uffae\102\uffae\105\uffae\001\002\000" +
    "\004\004\201\001\002\000\004\105\140\001\002\000\014" +
    "\011\ufffd\021\124\100\134\102\127\105\133\001\002\000" +
    "\004\011\ufffe\001\002\000\006\004\142\012\141\001\002" +
    "\000\022\004\uffb1\012\uffb1\013\uffb1\033\uffb1\052\uffb1\053" +
    "\uffb1\064\uffb1\077\uffb1\001\002\000\004\105\140\001\002" +
    "\000\004\053\143\001\002\000\014\055\147\056\145\057" +
    "\150\060\151\061\146\001\002\000\004\010\152\001\002" +
    "\000\012\010\uffc0\013\uffc0\052\uffc0\077\uffc0\001\002\000" +
    "\012\010\uffbe\013\uffbe\052\uffbe\077\uffbe\001\002\000\012" +
    "\010\uffc1\013\uffc1\052\uffc1\077\uffc1\001\002\000\012\010" +
    "\uffbf\013\uffbf\052\uffbf\077\uffbf\001\002\000\012\010\uffbd" +
    "\013\uffbd\052\uffbd\077\uffbd\001\002\000\034\012\044\044" +
    "\006\045\022\063\030\066\017\067\024\071\014\075\027" +
    "\101\043\105\020\106\040\110\037\111\042\001\002\000" +
    "\004\011\154\001\002\000\014\011\uffac\021\uffac\100\uffac" +
    "\102\uffac\105\uffac\001\002\000\004\013\173\001\002\000" +
    "\004\053\162\001\002\000\006\013\uffb0\077\160\001\002" +
    "\000\004\105\140\001\002\000\004\013\uffaf\001\002\000" +
    "\020\055\147\056\145\057\150\060\151\061\146\062\164" +
    "\073\165\001\002\000\010\013\uffc4\052\uffc4\077\uffc4\001" +
    "\002\000\014\055\147\056\145\057\150\060\151\061\146" +
    "\001\002\000\016\055\147\056\145\057\150\060\151\061" +
    "\146\105\140\001\002\000\010\013\uffc3\052\uffc3\077\uffc3" +
    "\001\002\000\010\013\uffc2\052\uffc2\077\uffc2\001\002\000" +
    "\010\013\uffb7\052\uffb7\077\uffb7\001\002\000\010\013\uffb6" +
    "\052\uffb6\077\uffb6\001\002\000\010\013\uffbc\052\uffbc\077" +
    "\uffbc\001\002\000\004\053\174\001\002\000\014\055\147" +
    "\056\145\057\150\060\151\061\146\001\002\000\004\010" +
    "\176\001\002\000\034\012\044\044\006\045\022\063\030" +
    "\066\017\067\024\071\014\075\027\101\043\105\020\106" +
    "\040\110\037\111\042\001\002\000\004\011\200\001\002" +
    "\000\014\011\uffab\021\uffab\100\uffab\102\uffab\105\uffab\001" +
    "\002\000\004\010\202\001\002\000\034\012\044\044\006" +
    "\045\022\063\030\066\017\067\024\071\014\075\027\101" +
    "\043\105\020\106\040\110\037\111\042\001\002\000\004" +
    "\011\204\001\002\000\014\011\uffa9\021\uffa9\100\uffa9\102" +
    "\uffa9\105\uffa9\001\002\000\004\012\206\001\002\000\004" +
    "\105\140\001\002\000\004\013\210\001\002\000\004\010" +
    "\211\001\002\000\034\012\044\044\006\045\022\063\030" +
    "\066\017\067\024\071\014\075\027\101\043\105\020\106" +
    "\040\110\037\111\042\001\002\000\004\011\213\001\002" +
    "\000\014\011\uffa3\021\uffa3\100\uffa3\102\uffa3\105\uffa3\001" +
    "\002\000\004\071\215\001\002\000\004\012\216\001\002" +
    "\000\034\012\044\044\006\045\022\063\030\066\017\067" +
    "\024\071\014\075\027\101\043\105\020\106\040\110\037" +
    "\111\042\001\002\000\004\013\220\001\002\000\042\002" +
    "\uffe5\011\uffe5\012\uffe5\013\uffe5\044\uffe5\045\uffe5\063\uffe5" +
    "\066\uffe5\067\uffe5\071\uffe5\075\uffe5\101\uffe5\105\uffe5\106" +
    "\uffe5\110\uffe5\111\uffe5\001\002\000\004\004\222\001\002" +
    "\000\004\010\223\001\002\000\034\012\044\044\006\045" +
    "\022\063\030\066\017\067\024\071\014\075\027\101\043" +
    "\105\020\106\040\110\037\111\042\001\002\000\004\011" +
    "\225\001\002\000\014\011\uffa8\021\uffa8\100\uffa8\102\uffa8" +
    "\105\uffa8\001\002\000\024\007\240\012\044\014\242\044" +
    "\006\045\022\105\046\106\040\110\037\111\042\001\002" +
    "\000\020\055\147\056\145\057\150\060\151\061\146\062" +
    "\164\073\230\001\002\000\020\055\147\056\145\057\150" +
    "\060\151\061\146\074\231\105\140\001\002\000\004\010" +
    "\232\001\002\000\004\105\140\001\002\000\004\052\236" +
    "\001\002\000\004\011\235\001\002\000\004\052\uffb5\001" +
    "\002\000\006\011\uffb2\105\140\001\002\000\004\011\uffb3" +
    "\001\002\000\004\052\252\001\002\000\054\020\051\022" +
    "\062\023\056\024\055\026\052\027\057\030\060\031\066" +
    "\032\073\034\071\035\064\037\070\040\063\041\074\042" +
    "\061\043\053\046\067\047\054\050\065\051\050\052\251" +
    "\001\002\000\020\012\044\044\006\045\022\105\046\106" +
    "\040\110\037\111\042\001\002\000\004\015\247\001\002" +
    "\000\060\013\uffc8\015\uffc8\020\051\022\062\023\056\024" +
    "\055\026\052\027\057\030\060\031\066\032\073\034\071" +
    "\035\064\037\070\040\063\041\074\042\061\043\053\046" +
    "\067\047\054\050\065\051\050\077\245\001\002\000\020" +
    "\012\044\044\006\045\022\105\046\106\040\110\037\111" +
    "\042\001\002\000\006\013\uffc9\015\uffc9\001\002\000\004" +
    "\052\250\001\002\000\042\002\uffe2\011\uffe2\012\uffe2\013" +
    "\uffe2\044\uffe2\045\uffe2\063\uffe2\066\uffe2\067\uffe2\071\uffe2" +
    "\075\uffe2\101\uffe2\105\uffe2\106\uffe2\110\uffe2\111\uffe2\001" +
    "\002\000\042\002\uffe4\011\uffe4\012\uffe4\013\uffe4\044\uffe4" +
    "\045\uffe4\063\uffe4\066\uffe4\067\uffe4\071\uffe4\075\uffe4\101" +
    "\uffe4\105\uffe4\106\uffe4\110\uffe4\111\uffe4\001\002\000\042" +
    "\002\uffe3\011\uffe3\012\uffe3\013\uffe3\044\uffe3\045\uffe3\063" +
    "\uffe3\066\uffe3\067\uffe3\071\uffe3\075\uffe3\101\uffe3\105\uffe3" +
    "\106\uffe3\110\uffe3\111\uffe3\001\002\000\004\064\254\001" +
    "\002\000\020\012\044\044\006\045\022\105\046\106\040" +
    "\110\037\111\042\001\002\000\054\010\256\020\051\022" +
    "\062\023\056\024\055\026\052\027\057\030\060\031\066" +
    "\032\073\034\071\035\064\037\070\040\063\041\074\042" +
    "\061\043\053\046\067\047\054\050\065\051\050\001\002" +
    "\000\034\012\044\044\006\045\022\063\030\066\017\067" +
    "\024\071\014\075\027\101\043\105\020\106\040\110\037" +
    "\111\042\001\002\000\004\011\260\001\002\000\042\002" +
    "\uffe7\011\uffe7\012\uffe7\013\uffe7\044\uffe7\045\uffe7\063\uffe7" +
    "\066\uffe7\067\uffe7\071\uffe7\075\uffe7\101\uffe7\105\uffe7\106" +
    "\uffe7\110\uffe7\111\uffe7\001\002\000\004\033\262\001\002" +
    "\000\004\074\263\001\002\000\004\010\264\001\002\000" +
    "\004\105\140\001\002\000\004\011\266\001\002\000\004" +
    "\052\uffb4\001\002\000\020\012\044\044\006\045\022\105" +
    "\046\106\040\110\037\111\042\001\002\000\054\013\271" +
    "\020\051\022\062\023\056\024\055\026\052\027\057\030" +
    "\060\031\066\032\073\034\071\035\064\037\070\040\063" +
    "\041\074\042\061\043\053\046\067\047\054\050\065\051" +
    "\050\001\002\000\004\010\272\001\002\000\034\012\uffe9" +
    "\044\uffe9\045\uffe9\063\uffe9\066\uffe9\067\uffe9\071\uffe9\075" +
    "\uffe9\101\uffe9\105\uffe9\106\uffe9\110\uffe9\111\uffe9\001\002" +
    "\000\034\012\044\044\006\045\022\063\030\066\017\067" +
    "\024\071\014\075\027\101\043\105\020\106\040\110\037" +
    "\111\042\001\002\000\004\011\276\001\002\000\044\002" +
    "\uffeb\011\uffeb\012\uffeb\013\uffeb\044\uffeb\045\uffeb\063\uffeb" +
    "\066\uffeb\067\uffeb\070\277\071\uffeb\075\uffeb\101\uffeb\105" +
    "\uffeb\106\uffeb\110\uffeb\111\uffeb\001\002\000\044\002\uffe8" +
    "\011\uffe8\012\uffe8\013\uffe8\044\uffe8\045\uffe8\063\uffe8\066" +
    "\uffe8\067\uffe8\070\uffe8\071\uffe8\075\uffe8\101\uffe8\105\uffe8" +
    "\106\uffe8\110\uffe8\111\uffe8\001\002\000\004\010\272\001" +
    "\002\000\034\012\044\044\006\045\022\063\030\066\017" +
    "\067\024\071\014\075\027\101\043\105\020\106\040\110" +
    "\037\111\042\001\002\000\004\011\276\001\002\000\042" +
    "\002\uffea\011\uffea\012\uffea\013\uffea\044\uffea\045\uffea\063" +
    "\uffea\066\uffea\067\uffea\071\uffea\075\uffea\101\uffea\105\uffea" +
    "\106\uffea\110\uffea\111\uffea\001\002\000\064\010\uffcc\013" +
    "\uffcc\015\uffcc\020\uffcc\022\uffcc\023\uffcc\024\uffcc\026\uffcc" +
    "\027\uffcc\030\uffcc\031\uffcc\032\uffcc\034\uffcc\035\uffcc\037" +
    "\uffcc\040\uffcc\041\uffcc\042\uffcc\043\uffcc\046\uffcc\047\uffcc" +
    "\050\uffcc\051\uffcc\052\uffcc\077\uffcc\001\002\000\020\012" +
    "\044\044\006\045\022\105\046\106\040\110\037\111\042" +
    "\001\002\000\004\052\306\001\002\000\042\002\uffa5\011" +
    "\uffa5\012\uffa5\013\uffa5\044\uffa5\045\uffa5\063\uffa5\066\uffa5" +
    "\067\uffa5\071\uffa5\075\uffa5\101\uffa5\105\uffa5\106\uffa5\110" +
    "\uffa5\111\uffa5\001\002\000\004\013\310\001\002\000\004" +
    "\052\311\001\002\000\042\002\uffa4\011\uffa4\012\uffa4\013" +
    "\uffa4\044\uffa4\045\uffa4\063\uffa4\066\uffa4\067\uffa4\071\uffa4" +
    "\075\uffa4\101\uffa4\105\uffa4\106\uffa4\110\uffa4\111\uffa4\001" +
    "\002\000\054\020\051\022\062\023\056\024\055\026\052" +
    "\027\057\030\060\031\066\032\073\034\071\035\064\037" +
    "\070\040\063\041\074\042\061\043\053\046\067\047\054" +
    "\050\065\051\050\052\313\001\002\000\042\002\uffaa\011" +
    "\uffaa\012\uffaa\013\uffaa\044\uffaa\045\uffaa\063\uffaa\066\uffaa" +
    "\067\uffaa\071\uffaa\075\uffaa\101\uffaa\105\uffaa\106\uffaa\110" +
    "\uffaa\111\uffaa\001\002\000\004\002\001\001\002\000\020" +
    "\012\044\044\006\045\022\105\046\106\040\110\037\111" +
    "\042\001\002\000\054\013\317\020\051\022\062\023\056" +
    "\024\055\026\052\027\057\030\060\031\066\032\073\034" +
    "\071\035\064\037\070\040\063\041\074\042\061\043\053" +
    "\046\067\047\054\050\065\051\050\001\002\000\004\010" +
    "\320\001\002\000\034\012\044\044\006\045\022\063\030" +
    "\066\017\067\024\071\014\075\027\101\043\105\020\106" +
    "\040\110\037\111\042\001\002\000\004\011\322\001\002" +
    "\000\042\002\uffe6\011\uffe6\012\uffe6\013\uffe6\044\uffe6\045" +
    "\uffe6\063\uffe6\066\uffe6\067\uffe6\071\uffe6\075\uffe6\101\uffe6" +
    "\105\uffe6\106\uffe6\110\uffe6\111\uffe6\001\002\000\010\002" +
    "\uffef\011\uffef\013\uffef\001\002\000\042\002\uffc5\011\uffc5" +
    "\012\uffc5\013\uffc5\044\uffc5\045\uffc5\063\uffc5\066\uffc5\067" +
    "\uffc5\071\uffc5\075\uffc5\101\uffc5\105\uffc5\106\uffc5\110\uffc5" +
    "\111\uffc5\001\002\000\042\002\ufff8\011\ufff8\012\ufff8\013" +
    "\ufff8\044\ufff8\045\ufff8\063\ufff8\066\ufff8\067\ufff8\071\ufff8" +
    "\075\ufff8\101\ufff8\105\ufff8\106\ufff8\110\ufff8\111\ufff8\001" +
    "\002\000\042\002\uffc7\011\uffc7\012\uffc7\013\uffc7\044\uffc7" +
    "\045\uffc7\063\uffc7\066\uffc7\067\uffc7\071\uffc7\075\uffc7\101" +
    "\uffc7\105\uffc7\106\uffc7\110\uffc7\111\uffc7\001\002\000\064" +
    "\010\uffcd\013\uffcd\015\uffcd\020\uffcd\022\uffcd\023\uffcd\024" +
    "\uffcd\026\uffcd\027\uffcd\030\uffcd\031\uffcd\032\uffcd\034\uffcd" +
    "\035\uffcd\037\uffcd\040\uffcd\041\uffcd\042\uffcd\043\uffcd\046" +
    "\uffcd\047\uffcd\050\uffcd\051\uffcd\052\uffcd\077\uffcd\001\002" +
    "\000\042\002\uffc6\011\uffc6\012\uffc6\013\uffc6\044\uffc6\045" +
    "\uffc6\063\uffc6\066\uffc6\067\uffc6\071\uffc6\075\uffc6\101\uffc6" +
    "\105\uffc6\106\uffc6\110\uffc6\111\uffc6\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\326\000\054\003\015\006\040\007\012\010\031\011" +
    "\006\013\011\015\033\023\032\030\010\032\003\033\025" +
    "\034\007\037\030\040\022\041\035\043\020\044\004\045" +
    "\034\053\024\054\014\055\044\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\015\033\030\326\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\052\006\322\007\012\010\031\011\006\013" +
    "\011\015\033\023\032\030\010\032\003\033\025\034\007" +
    "\037\030\040\022\041\035\043\020\044\004\045\034\053" +
    "\024\054\014\055\044\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\015\033\030\311\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\015\033" +
    "\030\302\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\023\260\001\001" +
    "\000\004\023\252\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\015\033\030\046\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\015\033\030\117\001\001" +
    "\000\006\015\033\030\116\001\001\000\006\015\033\030" +
    "\115\001\001\000\006\015\033\030\114\001\001\000\006" +
    "\015\033\030\113\001\001\000\006\015\033\030\112\001" +
    "\001\000\006\015\033\030\111\001\001\000\006\015\033" +
    "\030\110\001\001\000\006\015\033\030\107\001\001\000" +
    "\006\015\033\030\106\001\001\000\006\015\033\030\105" +
    "\001\001\000\006\015\033\030\104\001\001\000\006\015" +
    "\033\030\103\001\001\000\006\015\033\030\102\001\001" +
    "\000\006\015\033\030\101\001\001\000\006\015\033\030" +
    "\100\001\001\000\006\015\033\030\077\001\001\000\006" +
    "\015\033\030\076\001\001\000\002\001\001\000\006\015" +
    "\033\030\075\001\001\000\006\015\033\030\074\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\004\124\005\134\047\122\050\130\052" +
    "\121\056\125\057\131\060\127\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\023" +
    "\136\001\001\000\022\004\135\005\134\047\122\050\130" +
    "\052\121\056\125\057\131\060\127\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\012\154" +
    "\023\155\032\156\001\001\000\002\001\001\000\004\051" +
    "\143\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\052\006\152\007\012\010\031\011\006\013\011" +
    "\015\033\023\032\030\010\032\003\033\025\034\007\037" +
    "\030\040\022\041\035\043\020\044\004\045\034\053\024" +
    "\054\014\055\044\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\012\160\023\155\032\156\001\001\000\002\001" +
    "\001\000\010\021\166\025\165\051\162\001\001\000\002" +
    "\001\001\000\004\051\171\001\001\000\006\023\170\051" +
    "\167\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\051\174\001\001\000\002\001\001\000\052" +
    "\006\176\007\012\010\031\011\006\013\011\015\033\023" +
    "\032\030\010\032\003\033\025\034\007\037\030\040\022" +
    "\041\035\043\020\044\004\045\034\053\024\054\014\055" +
    "\044\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\052\006\202\007\012\010\031\011\006\013" +
    "\011\015\033\023\032\030\010\032\003\033\025\034\007" +
    "\037\030\040\022\041\035\043\020\044\004\045\034\053" +
    "\024\054\014\055\044\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\012\206\023\155\032" +
    "\156\001\001\000\002\001\001\000\002\001\001\000\052" +
    "\006\211\007\012\010\031\011\006\013\011\015\033\023" +
    "\032\030\010\032\003\033\025\034\007\037\030\040\022" +
    "\041\035\043\020\044\004\045\034\053\024\054\014\055" +
    "\044\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\052\006\216\007\012\010" +
    "\031\011\006\013\011\015\033\023\032\030\010\032\003" +
    "\033\025\034\007\037\030\040\022\041\035\043\020\044" +
    "\004\045\034\053\024\054\014\055\044\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\052\006\223\007\012\010\031\011\006\013\011" +
    "\015\033\023\032\030\010\032\003\033\025\034\007\037" +
    "\030\040\022\041\035\043\020\044\004\045\034\053\024" +
    "\054\014\055\044\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\015\033\030\240\001\001\000\010\021\166" +
    "\025\165\051\162\001\001\000\006\023\170\051\167\001" +
    "\001\000\002\001\001\000\010\014\233\023\155\032\232" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\014\236\023\155\032\232\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\015" +
    "\033\030\243\031\242\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\015\033\030\243\031\245\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\015" +
    "\033\030\254\001\001\000\002\001\001\000\052\006\256" +
    "\007\012\010\031\011\006\013\011\015\033\023\032\030" +
    "\010\032\003\033\025\034\007\037\030\040\022\041\035" +
    "\043\020\044\004\045\034\053\024\054\014\055\044\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\014\264\023" +
    "\155\032\232\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\015\033\030\267\001\001\000\002\001\001\000" +
    "\004\016\272\001\001\000\002\001\001\000\052\006\273" +
    "\007\012\010\031\011\006\013\011\015\033\023\032\030" +
    "\010\032\003\033\025\034\007\037\030\040\022\041\035" +
    "\043\020\044\004\045\034\053\024\054\014\055\044\001" +
    "\001\000\004\017\274\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\016\277\001\001\000\052\006\300\007" +
    "\012\010\031\011\006\013\011\015\033\023\032\030\010" +
    "\032\003\033\025\034\007\037\030\040\022\041\035\043" +
    "\020\044\004\045\034\053\024\054\014\055\044\001\001" +
    "\000\004\017\301\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\015\033\030\243\031\306\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\015\033\030\315\001\001\000" +
    "\002\001\001\000\002\001\001\000\052\006\320\007\012" +
    "\010\031\011\006\013\011\015\033\023\032\030\010\032" +
    "\003\033\025\034\007\037\030\040\022\041\035\043\020" +
    "\044\004\045\034\053\024\054\014\055\044\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$CompilerParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$CompilerParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$CompilerParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

    }

 
    public void report_error(String message, Object info) {
        StringBuffer msg = new StringBuffer("error");
        if (info instanceof Symbol) {
            Symbol s = (Symbol) info;
            msg.append(" in line ");
            msg.append(s.left);
        }
        msg.append(": ");
        msg.append(message);
        System.err.println(msg);
    }

    public void report_error(String message) {
        StringBuffer msg = new StringBuffer("error");
        System.err.println(msg);
    }

    public void report_error(String message, int line) {
        StringBuffer msg = new StringBuffer("error in line ");
        msg.append(line);
        msg.append(": ");
        msg.append(message);
        System.err.println(msg);
    }

    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
		  throw new RuntimeException("Fatal Syntax Error");
    }

    public void syntax_error(Symbol cur_token) {
        StringBuffer msg = new StringBuffer("syntax error in ");
        msg.append((Integer.valueOf(cur_token.left + 1))+"("+cur_token.right+")");
        System.err.println(msg);
    }

    public void syntax_error(int line, int column) {
        StringBuffer msg = new StringBuffer("syntax error in ");
        msg.append((Integer.valueOf(line+1))+"("+column+")");
        System.err.println(msg);
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$CompilerParser$actions {
  private final CompilerParser parser;

  /** Constructor */
  CUP$CompilerParser$actions(CompilerParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$CompilerParser$do_action(
    int                        CUP$CompilerParser$act_num,
    java_cup.runtime.lr_parser CUP$CompilerParser$parser,
    java.util.Stack            CUP$CompilerParser$stack,
    int                        CUP$CompilerParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$CompilerParser$result;

      /* select the action based on the action number */
      switch (CUP$CompilerParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // type_structure ::= STRUCTURE LA set_of_declars RA SEMIC 
            {
              Stree RESULT =null;

              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("type_structure",20, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // type_variable ::= VARIABLE_TYPE IDENTIFIER 
            {
              Stree RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		 
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("type_variable",18, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // type_pointer_simple ::= type_pointer 
            {
              Stree RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		Stree e = (Stree)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		 RESULT=e;
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("type_pointer_simple",16, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // type_pointer_simple ::= type_list 
            {
              Stree RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		Stree e = (Stree)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		 RESULT=e;
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("type_pointer_simple",16, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // type_pointer_simple ::= type_variable 
            {
              Stree RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		Stree e = (Stree)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		 RESULT=e;
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("type_pointer_simple",16, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // type_pointer_simple ::= type_simple 
            {
              Stree RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		Stree e = (Stree)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		 RESULT=e;
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("type_pointer_simple",16, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // type ::= type_pointer 
            {
              Stree RESULT =null;

              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("type",14, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // type ::= type_pointer_simple 
            {
              Stree RESULT =null;

              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("type",14, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // unary_expr ::= OR_BIT expr 
            {
              Stree RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		Stree e = (Stree)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		RESULT=new StreeORBIT(e);
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("unary_expr",47, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // main_function ::= PROCEDURE MAIN LPAR list_args RPAR LA insts RA 
            {
              Stree RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-4)).right;
		Stree e1 = (Stree)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).right;
		Stree s = (Stree)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).value;
		RESULT=new StreePROCEDURE(e1,new StreeFUNCTIONBODY(s));
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("main_function",44, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-7)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // functioncall_with_args ::= IDENTIFIER LPAR exprs RPAR SEMIC 
            {
              Stree RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).right;
		Stree e = (Stree)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).value;
		RESULT=new StreeFUNCTIONCALL(i,e);
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("functioncall_with_args",35, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // functioncall_without_args ::= IDENTIFIER FUNCTION_CALL SEMIC 
            {
              Stree RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).value;
		RESULT=new StreeFUNCTIONCALL(i);
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("functioncall_without_args",34, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // function_call ::= functioncall_with_args 
            {
              Stree RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		Stree e = (Stree)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		RESULT=e;
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("function_call",33, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // function_call ::= functioncall_without_args 
            {
              Stree RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		Stree e = (Stree)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		RESULT=e;
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("function_call",33, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // destructor ::= NOT_UNARY IDENTIFIER FUNCTION_CALL LA insts RA 
            {
              Stree RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).right;
		Stree s = (Stree)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).value;
		RESULT=new StreeDESTRUCTOR(i,s);
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("destructor",38, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-5)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // constructor ::= IDENTIFIER FUNCTION_CALL LA insts RA 
            {
              Stree RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).right;
		Stree s = (Stree)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).value;
		RESULT=new StreeCONSTRUCTOR(i,s);
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("constructor",37, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // return_stm ::= RETURN expr SEMIC 
            {
              Stree RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).right;
		Stree e = (Stree)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).value;
		RESULT=new StreeRETURN(e);
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("return_stm",41, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // functiondeclar_with_args ::= FUNCTION variable LPAR list_args RPAR DOUBLE_POINTS type_simple LA insts RA 
            {
              Stree RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-8)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-8)).right;
		Stree i = (Stree)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-8)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-6)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-6)).right;
		Stree e1 = (Stree)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-6)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-3)).right;
		Stree t = (Stree)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).right;
		Stree s = (Stree)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).value;
		RESULT=new StreeFUNCTIONDECLAR(new StreeFUNCTIONHEADER(e1,t),new StreeFUNCTIONBODY(s),i);
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("functiondeclar_with_args",46, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-9)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // functiondeclar_without_args ::= FUNCTION variable FUNCTION_CALL DOUBLE_POINTS type_simple LA insts RA 
            {
              Stree RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-6)).right;
		Stree i = (Stree)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-6)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-3)).right;
		Stree t = (Stree)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).right;
		Stree s = (Stree)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).value;
		RESULT=new StreeFUNCTIONDECLAR(new StreeFUNCTIONHEADER(i,t),new StreeFUNCTIONBODY(s),i);
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("functiondeclar_without_args",45, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-7)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // function_declaration ::= functiondeclar_with_args 
            {
              Stree RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		Stree e = (Stree)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		RESULT=e;
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("function_declaration",40, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // function_declaration ::= functiondeclar_without_args 
            {
              Stree RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		Stree e = (Stree)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		RESULT=e;
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("function_declaration",40, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // list_args ::= declar_simple COMMA list_args 
            {
              Stree RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).right;
		Stree e1 = (Stree)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		Stree e2 = (Stree)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		RESULT=new StreeFUNCTIONARGS(e1,e2);
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("list_args",8, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // list_args ::= declar_simple 
            {
              Stree RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		Stree e = (Stree)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		RESULT=new StreeFUNCTIONARGS(e);
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("list_args",8, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // variable ::= IDENTIFIER 
            {
              Stree RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		RESULT=new StreeIDENTIFIER(i,i);
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("variable",17, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // set_of_declars ::= declar_simple SEMIC 
            {
              Stree RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).right;
		Stree i = (Stree)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).value;
		RESULT=i;
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("set_of_declars",10, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // set_of_declars ::= declar_simple SEMIC set_of_declars 
            {
              Stree RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).right;
		Stree i1 = (Stree)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		Stree i2 = (Stree)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		RESULT=new StreeSUCC(i1,i2);
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("set_of_declars",10, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // declar_type ::= TYPE variable EQ STRUCTURE LA set_of_declars RA 
            {
              Stree RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-5)).right;
		Stree i = (Stree)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).right;
		Stree s = (Stree)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).value;
		RESULT=new StreeSTRUCTURE(i,s);
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("declar_type",9, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-6)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // declar_complex ::= variable DOUBLE_POINTS LIST STRUCTURE LA set_of_declars RA 
            {
              Stree RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-6)).right;
		Stree i = (Stree)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-6)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).right;
		Stree s = (Stree)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).value;
		RESULT=new StreeLISTOF(new StreeSTRUCTURE(i,s));
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("declar_complex",7, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-6)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // type_list ::= LIST variable 
            {
              Stree RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		Stree e = (Stree)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		RESULT=new StreeLISTOF(e);
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("type_list",19, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // type_list ::= LIST type_simple 
            {
              Stree RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		Stree e = (Stree)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		RESULT=new StreeLISTOF(e);
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("type_list",19, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // literal ::= IDENTIFIER 
            {
              Stree RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		String str = (String)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		RESULT = new StreeIDENTIFIER(str,str); 
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("literal",11, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // literal ::= FLOAT_LITERAL 
            {
              Stree RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		Float f = (Float)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		RESULT = new StreeFLOAT(f); 
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("literal",11, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // literal ::= INTEGER_LITERAL 
            {
              Stree RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		RESULT = new StreeINTEGER(i); 
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("literal",11, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // literal ::= CHARACTER_LITERAL 
            {
              Stree RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		RESULT = new StreeCHARACTER(c); 
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("literal",11, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // type_pointer ::= POINTER_OR_XOR type_simple 
            {
              Stree RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		Stree e = (Stree)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		 RESULT=new StreePOINTERTYPE(e);
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("type_pointer",15, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // type_simple ::= BOOLEAN_TYPE 
            {
              Stree RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		RESULT=new StreeBOOLEAN();
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("type_simple",39, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // type_simple ::= CHARACTER_TYPE 
            {
              Stree RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		RESULT=new StreeCHARACTER();
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("type_simple",39, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // type_simple ::= FLOAT_TYPE 
            {
              Stree RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		RESULT=new StreeFLOAT();
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("type_simple",39, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // type_simple ::= STRING_TYPE 
            {
              Stree RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		RESULT=new StreeSTRING();
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("type_simple",39, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // type_simple ::= INTEGER_TYPE 
            {
              Stree RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		RESULT=new StreeINTEGER();
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("type_simple",39, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // declar_simple ::= variable DOUBLE_POINTS type_pointer 
            {
              Stree RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).right;
		Stree i = (Stree)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		Stree e = (Stree)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		 RESULT=new StreeVARIABLEDECLAR(i,e);
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("declar_simple",24, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // declar_simple ::= variable DOUBLE_POINTS type_list 
            {
              Stree RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).right;
		Stree i = (Stree)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		Stree e = (Stree)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		 RESULT=new StreeVARIABLEDECLAR(i,e);
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("declar_simple",24, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // declar_simple ::= variable DOUBLE_POINTS type_simple 
            {
              Stree RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).right;
		Stree i = (Stree)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		Stree e = (Stree)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		 RESULT=new StreeVARIABLEDECLAR(i,e);
																				 if(Main.globaleEnv == false && Main.firstEnv==null){
																					Env n = new Env(Main.currentEnv);
																				//	n.add((String)i.getObject(),new Type(EnumType.INT));
																					Main.firstEnv=n;
																					Main.globaleEnv=true;
																					Main.currentEnv=n;
																				 }else{
																					Env n=Main.currentEnv;
																				//	n.add((String)i.getObject(),new Type(EnumType.INT));
																			      Main.currentEnv=n;
																				 }	
																				 Main.currentEnv.add((String)i.getObject(),new Type(EnumType.INT));
																			
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("declar_simple",24, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // declar ::= declar_type SEMIC 
            {
              Stree RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).right;
		Stree e = (Stree)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).value;
		RESULT=e;
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("declar",6, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // declar ::= declar_simple SEMIC 
            {
              Stree RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).right;
		Stree e = (Stree)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).value;
		RESULT=e;
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("declar",6, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // declar ::= declar_complex SEMIC 
            {
              Stree RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).right;
		Stree e = (Stree)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).value;
		RESULT=e;
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("declar",6, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // exprs ::= expr 
            {
              Stree RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		Stree e = (Stree)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		RESULT=e;
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("exprs",23, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // exprs ::= expr COMMA exprs 
            {
              Stree RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).right;
		Stree e1 = (Stree)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		Stree e2 = (Stree)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		RESULT=new StreeExps(e1,e2);
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("exprs",23, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expr ::= literal 
            {
              Stree RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		Stree e = (Stree)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		RESULT=e;
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("expr",22, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expr ::= LPAR expr RPAR 
            {
              Stree RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).right;
		Stree e = (Stree)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).value;
		RESULT=e;
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("expr",22, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expr ::= DECR expr 
            {
              Stree RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		Stree e = (Stree)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		RESULT=new StreeDECR(e);
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("expr",22, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expr ::= INCR expr 
            {
              Stree RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		Stree e = (Stree)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		RESULT=new StreeINCR(e);
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("expr",22, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expr ::= expr MOD_EQ expr 
            {
              Stree RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).right;
		Stree e1 = (Stree)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		Stree e2 = (Stree)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		RESULT=new StreeMOD_EQ(e1,e2);
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("expr",22, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expr ::= expr DIV_EQ expr 
            {
              Stree RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).right;
		Stree e1 = (Stree)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		Stree e2 = (Stree)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		RESULT=new StreeDIV_EQ(e1,e2);
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("expr",22, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expr ::= expr MULT_EQ expr 
            {
              Stree RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).right;
		Stree e1 = (Stree)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		Stree e2 = (Stree)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		RESULT=new StreeMULT_EQ(e1,e2);
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("expr",22, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expr ::= expr MINUS_EQ expr 
            {
              Stree RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).right;
		Stree e1 = (Stree)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		Stree e2 = (Stree)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		RESULT=new StreeMINUS_EQ(e1,e2);
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("expr",22, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expr ::= expr PLUS_EQ expr 
            {
              Stree RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).right;
		Stree e1 = (Stree)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		Stree e2 = (Stree)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		RESULT=new StreePLUS_EQ(e1,e2);
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("expr",22, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expr ::= expr OR expr 
            {
              Stree RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).right;
		Stree e1 = (Stree)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		Stree e2 = (Stree)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		RESULT=new StreeOR(e1,e2);
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("expr",22, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expr ::= expr AND expr 
            {
              Stree RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).right;
		Stree e1 = (Stree)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		Stree e2 = (Stree)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		RESULT=new StreeAND(e1,e2);
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("expr",22, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expr ::= expr RSHIFT expr 
            {
              Stree RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).right;
		Stree e1 = (Stree)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		Stree e2 = (Stree)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		RESULT=new StreeRSHIFT(e1,e2);
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("expr",22, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expr ::= expr LSHIFT expr 
            {
              Stree RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).right;
		Stree e1 = (Stree)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		Stree e2 = (Stree)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		RESULT=new StreeLSHIFT(e1,e2);
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("expr",22, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expr ::= expr EQEQ expr 
            {
              Stree RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).right;
		Stree e1 = (Stree)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		Stree e2 = (Stree)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		RESULT=new StreeEQ(e1,e2);
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("expr",22, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expr ::= expr DIFF expr 
            {
              Stree RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).right;
		Stree e1 = (Stree)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		Stree e2 = (Stree)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		RESULT=new StreeDIFF(e1,e2);
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("expr",22, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expr ::= expr GE expr 
            {
              Stree RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).right;
		Stree e1 = (Stree)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		Stree e2 = (Stree)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		RESULT=new StreeGE(e1,e2);
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("expr",22, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expr ::= expr LE expr 
            {
              Stree RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).right;
		Stree e1 = (Stree)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		Stree e2 = (Stree)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		RESULT=new StreeLE(e1,e2);
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("expr",22, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expr ::= expr GT expr 
            {
              Stree RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).right;
		Stree e1 = (Stree)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		Stree e2 = (Stree)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		RESULT=new StreeGT(e1,e2);
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("expr",22, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expr ::= expr LT expr 
            {
              Stree RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).right;
		Stree e1 = (Stree)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		Stree e2 = (Stree)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		RESULT=new StreeLT(e1,e2);
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("expr",22, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expr ::= expr MOD expr 
            {
              Stree RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).right;
		Stree e1 = (Stree)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		Stree e2 = (Stree)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		RESULT=new StreeMOD(e1,e2);
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("expr",22, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expr ::= expr MINUS expr 
            {
              Stree RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).right;
		Stree e1 = (Stree)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		Stree e2 = (Stree)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		RESULT=new StreeMINUS(e1,e2);
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("expr",22, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expr ::= expr DIV expr 
            {
              Stree RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).right;
		Stree e1 = (Stree)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		Stree e2 = (Stree)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		RESULT=new StreeDIV(e1,e2);
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("expr",22, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expr ::= expr MULT_OR_MEMORYACCESS expr 
            {
              Stree RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).right;
		Stree e1 = (Stree)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		Stree e2 = (Stree)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		RESULT=new StreeMULT(e1,e2);
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("expr",22, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expr ::= expr PLUS expr 
            {
              Stree RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).right;
		Stree e1 = (Stree)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		Stree e2 = (Stree)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		RESULT=new StreePLUS(e1,e2);
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("expr",22, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // affectation_variable ::= variable EQ LBRACKET exprs RBRACKET SEMIC 
            {
              Stree RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-5)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-5)).right;
		Stree v = (Stree)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).right;
		Stree e = (Stree)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).value;
		RESULT=new StreeAFF(v,new StreeARRAY(e));
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("affectation_variable",42, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-5)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // affectation_variable ::= variable EQ DOUBLE_BRACKET SEMIC 
            {
              Stree RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-3)).right;
		Stree v = (Stree)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-3)).value;
		RESULT=new StreeAFF(v,new StreeARRAY());
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("affectation_variable",42, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // affectation_variable ::= variable EQ expr SEMIC 
            {
              Stree RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-3)).right;
		Stree v = (Stree)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).right;
		Stree e = (Stree)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).value;
		 RESULT = new StreeAFF(v, e); 
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("affectation_variable",42, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // repeat_stm ::= REPEAT LA stms RA WHILE LPAR insts RPAR 
            {
              Stree RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-5)).right;
		Stree s = (Stree)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).right;
		Stree e = (Stree)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).value;
		RESULT=new StreeREPEATWHILE(s,e);
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("repeat_stm",43, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-7)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // while_stm ::= WHILE LPAR expr RPAR LA insts RA 
            {
              Stree RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-4)).right;
		Stree e = (Stree)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).right;
		Stree s = (Stree)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).value;
		RESULT=new StreeWHILE(e,s);
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("while_stm",30, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-6)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // foreach_stm ::= FOREACH variable IN expr LA insts RA 
            {
              Stree RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-5)).right;
		Stree i = (Stree)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-3)).right;
		Stree e = (Stree)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).right;
		Stree s = (Stree)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).value;
		RESULT=new StreeFOREACH(new StreeFOREACHHEADER(i,e),s);
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("foreach_stm",31, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-6)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // accof ::= RA 
            {
              Stree RESULT =null;
		Main.currentEnv=Main.currentEnv.getPrev();
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("accof",13, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // accoo ::= LA 
            {
              Stree RESULT =null;
		 Env n=new Env(Main.currentEnv);
					if(Main.firstEnv==null){
						Main.firstEnv=n;
					}else{
						Main.currentEnv.putNext(n);
						Main.currentEnv=n;
					}
					Main.currentEnv=n;
					
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("accoo",12, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // conditional_with_else ::= IF LPAR expr RPAR accoo insts accof ELSE accoo insts accof 
            {
              Stree RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-8)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-8)).right;
		Stree e = (Stree)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-8)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-5)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-5)).right;
		Stree s1 = (Stree)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-5)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).right;
		Stree s2 = (Stree)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).value;
		RESULT=new StreeIF(e,new StreeTHENELSE(s1,s2));
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("conditional_with_else",29, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-10)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // conditional_without_else ::= IF LPAR expr RPAR accoo insts accof 
            {
              Stree RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-4)).right;
		Stree e = (Stree)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).right;
		Stree s = (Stree)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).value;
		RESULT=new StreeIF(e,s); 
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("conditional_without_else",25, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-6)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // conditional_stm ::= conditional_with_else 
            {
              Stree RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		Stree e = (Stree)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		RESULT=e;
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("conditional_stm",26, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // conditional_stm ::= conditional_without_else 
            {
              Stree RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		Stree e = (Stree)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		RESULT=e;
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("conditional_stm",26, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // insts ::= inst 
            {
              Stree RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		Stree e = (Stree)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		RESULT=e;
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("insts",4, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // insts ::= inst insts 
            {
              Stree RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).right;
		Stree e1 = (Stree)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		Stree e2 = (Stree)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		RESULT=new StreeSUCC(e1,e2);
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("insts",4, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // inst ::= affectation_variable 
            {
              Stree RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		Stree e = (Stree)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		RESULT=e;
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("inst",5, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // inst ::= return_stm 
            {
              Stree RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		Stree e = (Stree)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		RESULT=e;
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("inst",5, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // inst ::= function_call 
            {
              Stree RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		Stree e = (Stree)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		RESULT=e;
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("inst",5, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // inst ::= repeat_stm 
            {
              Stree RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		Stree e = (Stree)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		RESULT=e;
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("inst",5, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // inst ::= foreach_stm 
            {
              Stree RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		Stree e = (Stree)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		RESULT=e;
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("inst",5, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // inst ::= while_stm 
            {
              Stree RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		Stree e = (Stree)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		RESULT=e;
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("inst",5, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // inst ::= conditional_stm 
            {
              Stree RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		Stree e = (Stree)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		RESULT=e;
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("inst",5, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // inst ::= declar 
            {
              Stree RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		Stree e = (Stree)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		RESULT=e;
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("inst",5, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // inst ::= expr SEMIC 
            {
              Stree RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).right;
		Stree e = (Stree)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).value;
		RESULT=e;
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("inst",5, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // stm ::= destructor 
            {
              Stree RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		Stree e = (Stree)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		RESULT=e;
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("stm",3, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // stm ::= constructor 
            {
              Stree RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		Stree e = (Stree)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		RESULT=e;
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("stm",3, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // stm ::= function_declaration 
            {
              Stree RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		Stree e = (Stree)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		RESULT=e;
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("stm",3, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // stm ::= main_function 
            {
              Stree RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		Stree e = (Stree)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		RESULT=e;
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("stm",3, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // stms ::= stm 
            {
              Stree RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		Stree e = (Stree)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		RESULT=e;
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("stms",2, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // stms ::= stm stms 
            {
              Stree RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).right;
		Stree s1 = (Stree)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		Stree s2 = (Stree)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		RESULT=new StreeSUCC(s1,s2);
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("stms",2, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // class ::= CLASS IDENTIFIER LA stms RA 
            {
              Stree RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).right;
		Stree s = (Stree)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).value;
		RESULT=new StreeCLASS(i,s);
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("class",0, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // axiom ::= insts 
            {
              Stree RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		Stree e = (Stree)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		RESULT=e;
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("axiom",1, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= axiom EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).right;
		Stree start_val = (Stree)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).value;
		RESULT = start_val;
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$CompilerParser$parser.done_parsing();
          return CUP$CompilerParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

